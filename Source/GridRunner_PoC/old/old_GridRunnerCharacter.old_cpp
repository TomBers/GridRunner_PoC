// Fill out your copyright notice in the Description page of Project Settings.


#include "GridRunnerCharacter.h"

#include "GridPoints.h"
#include "Components/CapsuleComponent.h"

// Sets default values
AGridRunnerCharacter::AGridRunnerCharacter()
{
 	// Set this character to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
	PrimaryActorTick.bCanEverTick = true;
}

// Called when the game starts or when spawned
void AGridRunnerCharacter::BeginPlay()
{
	Super::BeginPlay();
	
	// Setup a Track for the character to ride on
	if(GridPoints)
	{
		ConnectorSplineRef = GridPoints->GetConnectorSpline();	
	}
}

// Called every frame
void AGridRunnerCharacter::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);

}

// Called to bind functionality to input
void AGridRunnerCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)
{
	Super::SetupPlayerInputComponent(PlayerInputComponent);
	PlayerInputComponent->BindAxis("Move Forward / Backward", this, &AGridRunnerCharacter::MoveForward);
	PlayerInputComponent->BindAxis("FlyUp", this, &AGridRunnerCharacter::MoveCharUp);
	PlayerInputComponent->BindAxis("Turn Right / Left", this, &APawn::AddControllerYawInput);
	PlayerInputComponent->BindAction("SelectPoint", EInputEvent::IE_Pressed, this, &AGridRunnerCharacter::SelectPoint);

	PlayerInputComponent->BindAction("ToggleVisible", EInputEvent::IE_Pressed, this, &AGridRunnerCharacter::TogglePointsVisible);

	PlayerInputComponent->BindAction("BuildConnector", EInputEvent::IE_Pressed, this, &AGridRunnerCharacter::BuildConnector);
	

}

void AGridRunnerCharacter::MoveForward(float Value)
{
	if (Value != 0.0f)
	{
		// add movement in that direction
		AddMovementInput(GetActorForwardVector(), Value);
	}
}

void AGridRunnerCharacter::MoveCharUp(float Value)
{
	if (Value != 0.0f)
	{
		// add movement in that direction
		AddMovementInput(GetActorUpVector(), Value);
	}
}

void AGridRunnerCharacter::SelectPoint()
{
	// Lets get some hits
	FHitResult HitResult;

	const FVector Start = GetCapsuleComponent()->GetComponentLocation() + (GetCapsuleComponent()->GetForwardVector() * 50.f);
	const FVector End = Start + GetCapsuleComponent()->GetForwardVector() * HitLength;

	DrawDebugLine(GetWorld(), Start, End, FColor::Green, true, -1, 0, 4);

	FCollisionShape Sphere = FCollisionShape::MakeSphere(10.f);

	bool HasHit = GetWorld()->SweepSingleByChannel(
		HitResult,
		Start,
		End,
		FQuat::Identity,
		ECC_GameTraceChannel1,
		Sphere);

	if(HasHit)
	{
		GridPoints->SelectedPoint(HitResult.GetActor());
		
		// DrawDebugSphere(GetWorld(), HitResult.Location, 10, 10, FColor::Green, true, 5);
		// DrawDebugSphere(GetWorld(), HitResult.ImpactPoint, 10, 10, FColor::Red, true, 5);
	}
	
	
}

void AGridRunnerCharacter::TogglePointsVisible()
{
	GridPoints->TogglePointsVisible();
}

void AGridRunnerCharacter::BuildConnector()
{
	FHitResult HitResult;

	const FVector Start = GetCapsuleComponent()->GetComponentLocation() + (GetCapsuleComponent()->GetForwardVector());
	const FVector End = Start + GetCapsuleComponent()->GetForwardVector() * HitLength;

	DrawDebugLine(GetWorld(), Start, End, FColor::Green, true, -1, 0, 4);

	FCollisionShape Sphere = FCollisionShape::MakeSphere(10.f);

	bool HasHit = GetWorld()->SweepSingleByChannel(
		HitResult,
		Start,
		End,
		FQuat::Identity,
		ECC_GameTraceChannel1,
		Sphere);

	if(HasHit)
	{
		GridPoints->BuildConnection(HitResult.GetActor(), HitResult.GetActor()->GetActorRotation());
		ConnectorSplineRef = GridPoints->GetConnectorSpline();
	}
}

